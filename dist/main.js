(()=>{"use strict";var e={982:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLButtonElement{constructor(e){super(),this.handleClick=e.bind(this)}getStyles(){return"\n    <style>\n      .add-image-button {\n          width: 120px;\n          height: 40px;\n          font-size: 1.8rem;\n          background: rgb(79, 169, 211);\n          border: none;\n          border-radius: 5px;\n          color: white;\n      }\n      .add-image-button:active {\n          border: 2px solid rgb(111, 118, 119);\n      }\n    </style>\n    "}getTemplete(){const e=document.createElement("template");return e.innerHTML=`Add image ${this.getStyles()}`,e}render(){this.className="add-image-button",this.appendChild(this.getTemplete().content.cloneNode(!0)),this.addEventListener("click",this.handleClick)}connectedCallback(){this.render()}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}}customElements.define("add-image-button",n,{extends:"button"}),t.default=n},873:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this._observer=new MutationObserver((e=>this.onDomChanged(e))),this._src=""}get src(){return this._src}set src(e){this._src=e}getStyles(){return"\n    <style>\n      * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n      :host {\n        width: 100%;\n        height: auto;\n        display: grid;\n      }\n    </style>\n    "}getTemplete(){const e=document.createElement("template");return e.innerHTML=`\n      <div class="image-wrapper">\n        <img class="image-wrapper__image" alt="fox image">\n      </div>\n      ${this.getStyles()}\n    `,e}render(){this.shadowRoot?.append(this.getTemplete().content.cloneNode(!0))}onDomChanged(e){this.shadowRoot}connectedCallback(){this.render()}static get observedAttributes(){return["src"]}attributeChangedCallback(e,t,n){if("src"===e){this.src=n;const e=this.shadowRoot?.querySelector("img");e&&(e.src=this.src)}}disconnectedCallback(){this._observer.disconnect()}}customElements.define("image-wrapper",n),t.default=n},820:function(e,t,n){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(411));window.addEventListener("load",r.default),window.addEventListener("hashchange",r.default)},411:function(e,t,n){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(n(982)),o=s(n(873)),a=s(n(234)),i=async()=>{const e=new o.default;e.src=`https://randomfox.ca/images/${1,122,Math.floor(-121*Math.random()+122)}.jpg`,document.querySelector("#app")?.append(e),await a.default(e)};t.default=async()=>{const e=document.querySelector("#app"),t=new r.default(i);e?.append(t)}},234:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=e=>e.isIntersecting,s=e=>{const t=e.target;t.setAttribute("src",t.src),r.unobserve(t)},r=new IntersectionObserver((e=>{e.filter(n).forEach(s)}));t.default=e=>{r.observe(e)}}},t={};!function n(s){var r=t[s];if(void 0!==r)return r.exports;var o=t[s]={exports:{}};return e[s].call(o.exports,o,o.exports,n),o.exports}(820)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,