(()=>{"use strict";var e={982:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLButtonElement{constructor(e){super(),this.handleClick=e.bind(this)}getStyles(){return"\n    <style>\n      .add-image-button {\n          width: 120px;\n          height: 40px;\n          font-size: 1.8rem;\n          background: rgb(79, 169, 211);\n          border: none;\n          border-radius: 5px;\n          color: white;\n      }\n      .add-image-button:active {\n          border: 2px solid rgb(111, 118, 119);\n      }\n    </style>\n    "}getTemplete(){const e=document.createElement("template");return e.innerHTML=`Add image ${this.getStyles()}`,e}render(){this.className="add-image-button",this.appendChild(this.getTemplete().content.cloneNode(!0)),this.addEventListener("click",this.handleClick)}connectedCallback(){this.render()}disconnectedCallback(){this.removeEventListener("click",this.handleClick)}}customElements.define("add-image-button",n,{extends:"button"}),t.default=n},873:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(e){super(),this.attachShadow({mode:"open"}),this._image=e}get image(){return this._image}set image(e){this._image=e}getStyles(){return"\n    <style>\n      * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n      :host {\n        width: 100%;\n        height: auto;\n        display: grid;\n      }\n    </style>\n    "}getTemplete(){const e=document.createElement("template");return e.innerHTML=`\n      <div class="image-wrapper">\n        <img class="image-wrapper__image" src=${this.image} alt="fox image">\n      </div>\n      ${this.getStyles()}\n    `,e}render(){this.shadowRoot?.append(this.getTemplete().content.cloneNode(!0))}connectedCallback(){this.render()}}customElements.define("image-wrapper",n),t.default=n},820:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=a(n(411));window.addEventListener("load",r.default),window.addEventListener("hashchange",r.default)},411:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=a(n(175)),i=a(n(982)),s=a(n(873)),o=async e=>{const t=new s.default(await r.default("https://randomfox.ca/floof/"));document.querySelector("#app")?.append(t)};t.default=async()=>{const e=document.querySelector("#app"),t=new i.default(o);e?.append(t)}},175:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=async e=>{try{const t=await fetch(e);return(await t.json()).image}catch(e){console.log("Fetch error: "+e)}}}},t={};!function n(a){var r=t[a];if(void 0!==r)return r.exports;var i=t[a]={exports:{}};return e[a].call(i.exports,i,i.exports,n),i.exports}(820)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,